from aiogram import types, Dispatcher
from create_bot import bot
from aiogram.dispatcher.filters import Text

from keyboards.inline.inline_breeds import client_keyboard_breeds
from keyboards.inline.inline_commands import client_keyboard_commands

from Parser_class import Parser


# current_keyboard_level = 0
#
# STACK = []
#
# KEYBOARD_LEVELS = {
#     # 0: (client_keyboard_start, '–Ø –∫—Ä–æ–ª–∏–∫-–±–æ—Ç. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö—Ä–æ—à. –Ø —Ä–µ–∞–≥–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä—è–º –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫—Ä–æ–ª–∏–∫'),
#     # 1: (client_keyboard_commands, '–í–æ—Ç —á—Ç–æ —è —É–º–µ—é'),
#     2: (client_keyboard_breeds, '–ù–∞—Å –º–Ω–æ–≥–æ, –Ω–æ –≤—Å–µ –º—ã —Ä–∞–∑–Ω—ã–µ')
# }

english_to_russian = {
    'belichij': '–ë–µ–ª–∏—á–∏–π –∫–∞—Ä–ª–∏–∫',
    'germelin': '–ì–µ—Ä–º–µ–ª–∏–Ω',
    'karlikovyj-baran': '–ö–∞—Ä–ª–∏–∫–æ–≤—ã–π –±–∞—Ä–æ–Ω',
    'minor': '–ú–µ–Ω–æ—Ä',
    'minilop': '–ú–∏–Ω–∏–õ–æ–ø',
    'niderlandskij': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π',
    'xotot': '–•–æ—Ç–æ—Ç',
    'cvetnoj-karlik': '–¶–≤–µ—Ç–Ω–æ–π –∫–∞—Ä–ª–∏–∫'
}


async def empty(message: types.Message):
    """An empty handler does not work on commands"""
    await bot.send_message(message.from_user.id,
                           f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞(. –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ '
                           f'–ø—Ä–æ–ø–∏—à–∏ /start',)


async def command_start(callback: types.CallbackQuery):
    """Triggers by command /start
    Send inline keyboards with commands"""
    await bot.send_message(callback.from_user.id,
                           f'–í–æ—Ç —á—Ç–æ —è —É–º–µ—é',
                           reply_markup=client_keyboard_commands)
    await callback.answer()


async def send_address_shop(callback: types.CallbackQuery):
    """Send address of the shop"""
    await bot.send_message(callback.from_user.id, '–ú—ã —Å –±—Ä–∞—Ç—å—è–º–∏ –∏ —Å–µ—Å—Ç—Ä–∞–º–∏ —Ç—É—Å—É–µ–º—Å—è –∑–¥–µ—Å—å:\n'
                                                  '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å –î–µ—Ä–µ–≤–Ω—è –¢–∞—Ä—ã—á–µ–≤–æ, —É–ª. –Ø–±–ª–æ–Ω–µ–≤–∞—è 7-–í')
    await callback.answer()


async def send_phone_number(callback: types.CallbackQuery):
    """Send phone number"""
    await bot.send_message(callback.from_user.id, '–ó–≤–æ–Ω–∏ —Å—é–¥–∞:\n'
                                                  '+79252215934')
    await callback.answer()


async def send_email_address(callback: types.CallbackQuery):
    """Send email address"""
    await bot.send_message(callback.from_user.id, '–ü–∏—à–∏ —Å—é–¥–∞:\ntsarskiy_krolik@mail.ru')
    await callback.answer()


async def show_catalog(callback: types.CallbackQuery):
    """Send inline keyboard with breeds of the rabbits"""
    await bot.send_message(callback.from_user.id,
                           '–ù–∞—Å –º–Ω–æ–≥–æ, –Ω–æ –≤—Å–µ –º—ã —Ä–∞–∑–Ω—ã–µ',
                           reply_markup=client_keyboard_breeds)
    await callback.answer()


async def show_picked_breed(callback: types.CallbackQuery):
    """Send inline keyboard with breeds of rabbits"""
    data = Parser().parse(callback.data.split()[1])

    for i in data:
        if not i.discount_price:
            await bot.send_photo(callback.from_user.id, i.img_url,
                                 f'üêá–ü—É—à–∏—Å—Ç–∏–∫ –ø–æ—Ä–æ–¥—ãüêá: <b>{i.breed}</b>\n'
                                 f'üíµ–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—á–∞—Å—Ç—å—èüíµ: {i.old_price}\n'
                                 f'üî¨–ü–æ–¥—Ä–æ–±–Ω–µ–µüî¨: {i.more_info}',
                                 parse_mode='html')
        else:
            await bot.send_photo(callback.from_user.id, i.img_url,
                                 f'üêá–ü—É—à–∏—Å—Ç–∏–∫ –ø–æ—Ä–æ–¥—ãüêá: <b>{i.breed}</b>\n'
                                 f'üíµ–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Å–∫–∏–¥–∫–µüíµ: {i.discount_price}\n'
                                 f'<b>‚åõ–°–ö–ò–î–ö–ê –ü–†–û–î–õ–ò–¢–°–Ø –ï–©–ï‚åõ</b>: {i.time_to_disc_end}\n'
                                 f'üî¨–ü–æ–¥—Ä–æ–±–Ω–µ–µüî¨: {i.more_info}',
                                 parse_mode='html')
    await callback.answer()
    await bot.send_message(callback.from_user.id,
                           f'–≠—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–æ–ª–∏–∫–æ–≤ –ø–æ—Ä–æ–¥—ã {english_to_russian[callback.data.split()[1]]}.'
                           f'–ò—Ö –±–æ–ª—å—à–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: https://tsarskiykrolik.com/',
                           reply_markup=client_keyboard_breeds)


def register_inline_handlers_client(dp: Dispatcher):
    """The function registers handlers"""
    dp.register_callback_query_handler(command_start, Text(startswith=('show_commands')))
    dp.register_callback_query_handler(send_address_shop, Text(startswith=('location')))
    dp.register_callback_query_handler(send_phone_number, Text(startswith=('phone_number')))
    dp.register_callback_query_handler(send_email_address, Text(startswith=('email')))
    dp.register_callback_query_handler(show_catalog, Text(startswith=('catalog')))
    dp.register_callback_query_handler(show_picked_breed, Text(startswith=('breed')))
    dp.register_message_handler(empty)
